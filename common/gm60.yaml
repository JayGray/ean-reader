uart:
  id: uart_bus
  tx_pin: GPIO17
  rx_pin: GPIO16
  baud_rate: 115200
  debug:
    direction: BOTH
    dummy_receiver: true
    after:
      delimiter: "\r\n"
    sequence:
      - lambda: |-
          UARTDebug::log_string(direction, bytes);
          std::string str(bytes.begin(), bytes.end());
      - text_sensor.template.publish:
          id: barcode_scanner
          state: !lambda |
            std::string s(bytes.begin(), bytes.end());
            return s;

api:
  services:
    - service: push_ean
      variables:
        eancode: string
      then:
        - script.execute:
            id: push_ean
            ean: !lambda return eancode.c_str();

http_request:
  useragent: esphome/ean-reader
  timeout: 10s
  id: http_request_data
  verify_ssl: false

text_sensor:
  - platform: template
    id: barcode_scanner
    name: "${friendly_name} Sensor"
    on_value:
      then:
        - if:
            condition:
              - lambda: 'return id(barcode_scanner).state != "unknown";'
            then:
              - script.execute:
                  id: push_ean
                  ean: !lambda return x.c_str();
              - rtttl.play:
                  rtttl: !lambda 'return "two_short:d=4,o=5,b=100:16e6,16e6";'

  - platform: template
    id: last_ean
    name: "${friendly_name} EAN"

script:
  - id: push_ean
    parameters:
      ean: std::string
    mode: restart
    then:
      - script.execute:
          id: call_api
          ean: !lambda return ean.c_str();
      - delay: 500ms
      - text_sensor.template.publish:
          id: barcode_scanner
          state: unknown

  - id: call_api
    parameters:
      ean: std::string
    mode: restart
    then:
      - lambda: |-
          ESP_LOGD("Call API", "Scanned EAN: %s\n", ean.c_str());
      - lambda: id(last_ean).publish_state(ean);
      - if:
          condition:
            switch.is_on: in_or_out
          then:
            - http_request.post:
                url: !lambda |-
                  std::string url = "${api_url}/" + ean;
                  ESP_LOGD("Add EAN", "API: %s\n", url.c_str());
                  return url;
                capture_response: true
                on_response:
                  then:
                    - if:
                        condition:
                          lambda: return response->status_code == 200;
                        then:
                          - switch.turn_on: blink_led_green
                        else:
                          - logger.log:
                              format: "Error: Response status: %d, message %s"
                              args: [response->status_code, body.c_str()]
                          - switch.turn_on: blink_led_red
                on_error:
                  then:
                    - logger.log: "Request failed"
                    - switch.turn_on: blink_led_red
          else:
            - http_request.send:
                method: DELETE
                url: !lambda |-
                  std::string url = "${api_url}/" + ean;
                  ESP_LOGD("DELETE EAN", "API: %s\n", url.c_str());
                  return url;
                capture_response: true
                on_response:
                  then:
                    - if:
                        condition:
                          lambda: return response->status_code == 200;
                        then:
                          - switch.turn_on: blink_led_green
                        else:
                          - logger.log:
                              format: "Error: Response status: %d, message %s"
                              args: [response->status_code, body.c_str()]
                          - switch.turn_on: blink_led_red
                on_error:
                  then:
                    - logger.log: "Request failed"
                    - switch.turn_on: blink_led_red

