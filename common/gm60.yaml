globals:
  - id: is_outgoing
    type: bool
    initial_value: "false"

uart:
  id: uart_bus
  tx_pin: GPIO17
  rx_pin: GPIO16
  baud_rate: 115200
  debug:
    direction: BOTH
    dummy_receiver: true
    after:
      delimiter: "\r\n"
    sequence:
      - lambda: |-
          UARTDebug::log_string(direction, bytes);
          std::string str(bytes.begin(), bytes.end());
      - text_sensor.template.publish:
          id: barcode_scanner
          state: !lambda |
            std::string s(bytes.begin(), bytes.end());
            return s;

api:
  services:
    - service: request_ean
      variables:
        eancode: string
      then:
        - script.execute:
            id: request_ean
            ean: !lambda return eancode.c_str();

http_request:
  useragent: esphome/ean-reader
  timeout: 10s
  id: http_request_data
  verify_ssl: false

text_sensor:
  - platform: template
    id: barcode_scanner
    name: "${friendly_name} Sensor"
    on_value:
      then:
        - if:
            condition:
              - lambda: 'return id(barcode_scanner).state != "unknown";'
            then:
              - script.execute:
                  id: request_ean
                  ean: !lambda return x.c_str();
              - rtttl.play:
                  rtttl: !lambda 'return "two_short:d=4,o=5,b=100:16e6,16e6";'

  - platform: template
    id: last_ean
    name: "${friendly_name} EAN"
  - platform: template
    id: last_brand
    name: "${friendly_name} Brand"
  - platform: template
    id: last_product
    name: "${friendly_name} Product"

script:
  - id: request_ean
    parameters:
      ean: std::string
    mode: restart
    then:
      - script.execute:
          id: getEanData
          ean: !lambda return ean.c_str();
      - delay: 500ms
      - text_sensor.template.publish:
          id: barcode_scanner
          state: unknown

  - id: getEanData
    parameters:
      ean: std::string
    mode: restart
    then:
      - script.execute: clearProductData
      - lambda: |-
          ESP_LOGD("getEanData", "Scanned EAN: %s\n", ean.c_str());
      - lambda: id(last_ean).publish_state(ean);
      - script.execute:
          id: refreshProductNameEanSearch
          ean: !lambda return ean.c_str();
      - lambda: |-
          ESP_LOGD("getEanData", "EAN Search result: %s\n", id(last_product).state.c_str());

  - id: clearProductData
    mode: restart
    then:
      - lambda: id(last_ean).publish_state("");
      - lambda: id(last_brand).publish_state("");
      - lambda: id(last_product).publish_state("");

  - id: refreshProductNameEanSearch
    parameters:
      ean: std::string
    mode: restart
    then:
      - http_request.get:
          url: !lambda |-
            std::string url = "https://api.ean-search.org/api?token=${ean_search_api_token}&op=barcode-lookup&format=json&ean=" + ean;
            ESP_LOGD("ean-search", "API: %s\n", url.c_str());
            return url;
          capture_response: true
          on_response:
            then:
              - if:
                  condition:
                    lambda: return response->status_code == 200;
                  then:
                    - logger.log:
                        format: "Success: Response status: %d, message %s"
                        args: [response->status_code, body.c_str()]
                    - lambda: |-
                        DynamicJsonDocument doc(2048);
                        deserializeJson(doc, body);

                        for (JsonObject elem : doc.as<JsonArray>()) {
                          const char* name = elem["name"];

                          ESP_LOGD("API request", "Found product with name: %s", name);
                          id(last_product).publish_state(name);
                        }
                  #json::parse_json(body, [](JsonObject root) -> bool {
                  #        if (root[0]["name"]) {
                  #          const char* name = root[0]["name"];
                  #
                  #                            ESP_LOGD("API request", "Found product with name: %s", name);
                  #                            id(last_product).publish_state(name);
                  #                            return true;
                  #                          } else {
                  #                            ESP_LOGD("API request","No 'vol' key in this json!");
                  #                            return false;
                  #                          }
                  #                        });
                  else:
                    - logger.log:
                        format: "Error: Response status: %d, message %s"
                        args: [response->status_code, body.c_str()]
